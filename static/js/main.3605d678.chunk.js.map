{"version":3,"sources":["index.js"],"names":["FIXTURES","FixtureRow","props","state","fixtureDetails","fixtureDetailToggle","handleFixtureChange","bind","handleRemoveButtonClick","handleFixtureClick","e","this","onFixtureChange","fixture","id","target","value","onRemoveButtonClick","setState","details","weight","power","type","removeButton","selected","onClick","quantityShown","quantity","class","manufacturer","onKeyPress","key","preventDefault","onChange","onKeyDown","evt","includes","React","Component","FixtureTable","fixtureId","filterText","productionCo","currentTruss","rows","fixtures","forEach","toLowerCase","truss","productionCos","fixtureSelectedOrNot","selectedFixtures","selectFixture","push","SearchBar","handleFilterTextChange","handleProdCoChange","onFilterTextChange","onProdCoChange","placeholder","FilterableFixtureTable","SelectedFixturesTable","BalancePhases","fixturePhaseSplit","fixtureTypes","phaseLoad","console","table","indexNextPhase","maxPower","load","indexOf","getObj","phaseCount","sum","i","log","phase","printablePhaseLoads","map","printPower","printablePhaseAmps","Math","ceil","TotalPower","Number","powerDraw","amps","TotalWeight","toFixed","TrussBreakdown","trussBreakdowns","trussList","trussSelected","Totals","name","fixtureCount","FixtureSelector","TrussSelector","handleTrussSelect","onTrussSelect","dataset","trussSeperated","trussName","style","fontWeight","data-truss","Build","Review","App","mode","handleBuildMode","parseInt","updatedSelectedFixtures","slice","newFixture","fixtureAlreadySelected","remainingFixtures","filter","page","reviewStyle","buildStyle","data-mode","visualPower","toString","list","keyName","foundObj","obj","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","ReactDOM","render","document","querySelector","open","send"],"mappings":"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","file":"static/js/main.3605d678.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nvar FIXTURES;\nconst VOLTAGE = 230;\n\n/*components\n    1) App\n    2) Fixture Selector\n    3) User Input \n        search text ---state\n        value of dropdown --state\n    4) Selected Fixtures ---props\n    5) Searched Fixtures ---props\n    6) Fixture (smol view) --props\n*/\n\nclass FixtureRow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fixtureDetails: (<div></div>),\n            fixtureDetailToggle: false\n        };\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n        this.handleFixtureClick = this.handleFixtureClick.bind(this);\n    }\n    \n\n    handleFixtureChange(e) {\n        this.props.onFixtureChange(this.props.fixture.id, e.target.value);\n    }\n\n    handleRemoveButtonClick() {\n        this.props.onRemoveButtonClick(this.props.fixture.id);\n    }\n\n    handleFixtureClick(e) {\n        if (this.state.fixtureDetailToggle) {\n            this.setState({fixtureDetails: (<div></div>)})\n            this.setState({fixtureDetailToggle: false});\n        } else {\n            \n            let details = \"\" + \n                this.props.fixture.weight +\"kg, \" +\n                this.props.fixture.power + \"W, \" +\n                this.props.fixture.type;\n            this.setState({fixtureDetails: (<div>{details}</div>)});\n            this.setState({fixtureDetailToggle: true});\n        }\n    }\n\n    render() {\n        const fixture = this.props.fixture;\n\n        let removeButton = \"\";\n        if (fixture.selected) {\n            removeButton = (<button \n                type=\"button\" \n                onClick={this.handleRemoveButtonClick}\n                >\n                Remove\n                </button>)\n        }\n        let quantityShown = \"\";\n        if(fixture.quantity) {\n            quantityShown = fixture.quantity;\n        }\n\n        return (\n            <tr class=\"fixture-row\">\n                <td \n                    onClick={this.handleFixtureClick}\n                >\n                    <tr>\n                        {fixture.manufacturer} \n                        {\" \"}\n                        {fixture.fixture}\n                    </tr>\n                    <tr>\n                        {this.state.fixtureDetails}\n                    </tr>\n                </td>\n                <td>\n                    <form \n                        onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\n                    >\n                        <input \n                        class=\"quantity-input\"\n                        type=\"number\"\n                        value={quantityShown}\n                        onChange={this.handleFixtureChange}\n                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault()}\n                        />\n                        \n                    </form>\n                </td>\n                <td>{removeButton}</td>\n            </tr>\n\n        )\n    };\n}\n\nclass FixtureTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n    }\n\n    handleFixtureChange(fixtureId,quantity) {\n        this.props.onFixtureChange(fixtureId,quantity);\n    }\n\n    handleRemoveButtonClick(fixtureId) {\n        this.props.onRemoveButtonClick(fixtureId);\n    }\n\n    render() {\n        const filterText = this.props.filterText;\n        const productionCo = this.props.productionCo;\n        const currentTruss = this.props.currentTruss;\n\n        const rows = [];\n        \n        this.props.fixtures.forEach((fixture) => {\n\n            //filter by search\n            if (!fixture.manufacturer.toLowerCase().includes(filterText.toLowerCase()) &&\n            !fixture.fixture.toLowerCase().includes(filterText.toLowerCase())) {\n                return;\n            }\n\n            //filter by truss\n            if (fixture.truss) {\n                if (fixture.truss !== currentTruss) {\n                    return;\n                }\n            }\n\n            //ignore default filter if search has value\n            if (!(filterText && productionCo === \"default\")) {\n            //filter by production Company (or default)\n                if(productionCo !== \"\") {\n                    if (!fixture.productionCos.includes(productionCo.toLowerCase())) {\n                        return;\n                    }\n                }\n            }\n\n            //replace with selected fixture if necessary\n\n            let fixtureSelectedOrNot = fixture;\n            if (this.props.selectedFixtures) {\n                this.props.selectedFixtures.forEach((selectFixture) => {\n                    if (selectFixture.id === fixture.id && selectFixture.truss===currentTruss) {\n                        fixtureSelectedOrNot = selectFixture;\n                        return;\n                    }\n                })\n            }\n\n            rows.push(\n                <FixtureRow\n                    fixture={fixtureSelectedOrNot}\n                    key = {fixture.id} \n                    onFixtureChange={this.handleFixtureChange}\n                    onRemoveButtonClick={this.handleRemoveButtonClick}\n                    />\n            );\n        });\n\n        return (\n            <div>\n                <div class=\"fixture-table\">\n                    <th>Fixture</th>\n                    <th>Quantity</th>\n                    <div></div>\n                </div>\n\n                    {rows}\n\n            </div>\n\n                \n\n        );\n    }\n}\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n        this.handleProdCoChange = this.handleProdCoChange.bind(this);\n    }\n\n    handleFilterTextChange(e) {\n        this.props.onFilterTextChange(e.target.value);\n    }\n\n    handleProdCoChange(e) {\n        this.props.onProdCoChange(e.target.value);\n    }\n\n    render() {\n        const filterText = this.props.filterText;\n\n        return (\n            <form\n                onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\n            >\n                <input \n                    type=\"text\" \n                    placeholder=\"Search...\" \n                    value={filterText} \n                    onChange={this.handleFilterTextChange}\n                />\n                <p>\n                    <select onChange={this.handleProdCoChange}>\n                        <option value = \"default\">Filter by Production Co.</option>\n                        <option value = \"CSE\">CSE</option>\n                        <option value = \"Siyan\">Siyan</option>\n                    </select>\n                </p>\n            </form>\n        )\n    }\n}\n\nclass FilterableFixtureTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterText: '',\n            productionCo: 'default'\n        };\n\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n        this.handleProdCoChange = this.handleProdCoChange.bind(this);\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n    }\n\n    handleFilterTextChange(filterText) {\n        this.setState({\n            filterText: filterText\n        });\n    }\n\n    handleProdCoChange(productionCo) {\n        this.setState({\n            productionCo: productionCo\n        });\n    }\n\n    handleFixtureChange(fixtureId, quantity) {\n        this.props.onFixtureChange(fixtureId, quantity);\n    }\n\n    handleRemoveButtonClick(fixtureId) {\n        this.props.onRemoveButtonClick(fixtureId);\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Add fixtures</h2>\n                <SearchBar \n                    filterText={this.state.filterText} \n                    onFilterTextChange={this.handleFilterTextChange}\n                    onProdCoChange={this.handleProdCoChange}\n                />\n                <FixtureTable \n                    fixtures={this.props.fixtures} \n                    selectedFixtures={this.props.selectedFixtures}\n                    filterText={this.state.filterText} \n                    productionCo={this.state.productionCo}\n                    onFixtureChange={this.handleFixtureChange}\n                    onRemoveButtonClick={this.handleRemoveButtonClick}\n                    currentTruss={this.props.currentTruss}\n                 />\n            </div>\n        )\n    }\n}\n\nclass SelectedFixturesTable extends React.Component {\n    constructor (props) {\n        super(props);\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n    }\n\n    handleFixtureChange (fixtureId,quantity) {\n        this.props.onFixtureChange(fixtureId,quantity);\n    }\n\n    handleRemoveButtonClick(fixtureId) {\n        this.props.onRemoveButtonClick(fixtureId);\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>\n                    Selected Fixtures\n                </h2>\n                <FixtureTable \n                fixtures={this.props.selectedFixtures} \n                filterText={\"\"} \n                productionCo={\"\"}\n                onFixtureChange={this.handleFixtureChange}\n                onRemoveButtonClick={this.handleRemoveButtonClick}\n                currentTruss={this.props.currentTruss}\n                 />\n            </div>\n        )\n    }\n}\n\nclass BalancePhases extends React.Component {\n    render () {\n        //let loadperPhase = powerDraw(this.props.selectedFixtures) / 3;\n        let fixturePhaseSplit = [];\n        let fixtureTypes = [];\n        let phaseLoad = [0,0,0]\n\n        //Check what fixture types there are in project\n        this.props.selectedFixtures.forEach((fixture) => {\n            if(!fixtureTypes.includes(fixture.id)) {\n                fixtureTypes.push(fixture.id);\n            }\n        });\n        console.table(phaseLoad);\n        //add up fixture totals\n        fixtureTypes.forEach((id) => {\n            //check highest Phase, get index of next phase\n            let indexNextPhase = 0;\n            if (phaseLoad[0] !== phaseLoad[1] || phaseLoad[0] !== phaseLoad[2] || phaseLoad[1] !== phaseLoad[2]){\n                let maxPower=0;\n                \n                phaseLoad.forEach((load) => {\n                    if (load>maxPower){\n                        maxPower = load;\n                    }\n                });\n                indexNextPhase = phaseLoad.indexOf(maxPower) + 1;\n            }\n            let fixture = getObj(this.props.selectedFixtures,'id',id);\n            let phaseCount = [0,0,0];\n            let sum = 0;\n            //bit boring here because fixtures could be selected twice under different truss\n            this.props.selectedFixtures.forEach((fixture) => {\n                if (fixture.id === id) {\n                    sum += fixture.quantity;\n                }\n            });\n            //round robin phases\n            for (let i=0;i<sum; i++) {\n                phaseCount[(indexNextPhase+i)%3] ++;\n                if(fixture) {\n                    console.log(fixture.power);\n                    phaseLoad[(indexNextPhase+i)%3] += fixture.power;\n                }\n            }\n            console.table(phaseLoad);\n            fixturePhaseSplit.push((<div>{getObj(this.props.selectedFixtures,'id',id).fixture}</div>));\n            phaseCount.forEach((phase) => {\n                fixturePhaseSplit.push((<div>{phase}</div>));\n            })\n        });\n\n        let printablePhaseLoads = phaseLoad.map((phase) => {\n            return((<div>{printPower(phase)}</div>));\n        });\n        let printablePhaseAmps = phaseLoad.map((phase) => {\n            return((<div>{Math.ceil(phase/VOLTAGE)}A</div>));\n        });\n        return (\n            <div>\n                <h2>Phase Balance</h2>\n                <div class=\"phase-table\">\n                    <div></div>\n                    <div>Φ1</div>\n                    <div>Φ2</div>\n                    <div>Φ3</div>\n                    {fixturePhaseSplit}\n                </div>\n                -------------------------------------\n                <div>Total</div>\n                <div class=\"phase-table\">\n                    <div>Power</div>\n                    {printablePhaseLoads}\n                    <div>Current</div>\n                    {printablePhaseAmps}\n                </div>\n            </div>\n        );\n    }\n}\nclass TotalPower extends React.Component {\n\n    render() {\n        let power = powerDraw(this.props.selectedFixtures);\n\n        let amps = power / VOLTAGE;\n\n        return (\n            <div>\n                <p>\n                    Power: {printPower(power)}\n                </p>\n                <p>\n                    Current ({VOLTAGE}v): {Math.ceil(amps)}A\n                </p>\n            </div>\n        )\n    }\n}\n\nclass TotalWeight extends React.Component {\n\n    render() {\n        let weight = 0;\n        if (this.props.selectedFixtures) {\n            this.props.selectedFixtures.forEach((fixture) => {\n                if (fixture.quantity >=1) {\n                    weight += Number(fixture.weight)*Number(fixture.quantity);\n                }\n            });\n        }\n\n\n        return (\n            <p>\n                Weight: {weight.toFixed(0)}kg\n            </p>\n        )\n    }\n}\n\nclass TrussBreakdown extends React.Component {\n    render() {\n        let trussBreakdowns = [];\n        this.props.trussList.forEach((truss) => {\n            let trussSelected = [];\n            this.props.selectedFixtures.forEach((fixture) => {\n                if(fixture.truss === truss) {\n                    trussSelected.push(fixture);\n                }\n            })\n            trussBreakdowns.push(\n                <Totals \n                    name={truss}\n                    selectedFixtures={trussSelected}\n                />\n            );\n        });\n        return (\n            <div>\n                {trussBreakdowns}\n            </div>\n        )\n    }\n}\nclass Totals extends React.Component {\n\n    render () {\n        let fixtureCount = 0;\n        this.props.selectedFixtures.forEach((fixture) =>{\n            fixtureCount += Number(fixture.quantity);\n        });\n        return (\n            <div >\n                <h2>{this.props.name}</h2>\n                <div class=\"totals\">\n                    <TotalPower selectedFixtures={this.props.selectedFixtures}/>\n                    <div>\n                        <TotalWeight selectedFixtures={this.props.selectedFixtures}/>\n                        <p>Fixture Count: {fixtureCount}</p>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nclass FixtureSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        //this.handleSelectedFixtureChange = this.handleSelectedFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n        }\n\n    handleFixtureChange (fixtureId,quantity) {\n        this.props.onFixtureChange(fixtureId,quantity);\n    }\n\n    handleRemoveButtonClick(fixtureId) {\n        this.props.onRemoveButtonClick(fixtureId);\n    }\n\n    render() {\n        return (\n            <div class=\"fixture-selector\">\n                <FilterableFixtureTable \n                    fixtures = {FIXTURES.fixtures}\n                    selectedFixtures={this.props.selectedFixtures}\n                    onFixtureChange = {this.handleFixtureChange}\n                    onRemoveButtonClick={this.handleRemoveButtonClick}\n                    currentTruss={this.props.currentTruss}\n                />\n                <SelectedFixturesTable \n                    selectedFixtures={this.props.selectedFixtures} \n                    onFixtureChange={this.handleFixtureChange}\n                    onRemoveButtonClick={this.handleRemoveButtonClick}\n                    currentTruss={this.props.currentTruss}\n                />\n            </div>\n        )\n    }\n}\n\nclass TrussSelector extends React.Component {\n    constructor(props) {\n        super(props);\n    this.handleTrussSelect = this.handleTrussSelect.bind(this);\n    }\n\n    handleTrussSelect (e) {\n        this.props.onTrussSelect(e.target.dataset.truss)\n    }\n\n    render () {\n        let trussSeperated = [];\n        this.props.trussList.forEach((trussName)=>{\n            trussSeperated.push(\n                <div\n                    style={(this.props.currentTruss===trussName)?{\n                        fontWeight: \"bold\"\n                    }:{\n                        fontWeight: \"lighter\"\n                    }}\n                    data-truss={trussName}\n                    onClick={this.handleTrussSelect}>\n                    {trussName}\n                </div>\n            )\n        });\n        return (\n            <div id=\"truss-selector\">\n                {trussSeperated}\n            </div>\n        )\n    }\n}\n\nclass Build extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n        this.handleTrussSelect = this.handleTrussSelect.bind(this);\n    }\n\n    handleTrussSelect (trussName) {\n        this.props.onTrussSelect(trussName);\n    }\n\n    handleFixtureChange (fixtureId, quantity) {\n        this.props.onFixtureChange(fixtureId, quantity);\n    }\n\n    handleRemoveButtonClick (fixtureId) {\n        this.props.onRemoveButtonClick(fixtureId);\n    }\n\n    render() {\n        return (\n            <div>\n                <TrussSelector\n                    onTrussSelect={this.handleTrussSelect}\n                    trussList = {this.props.trussList}\n                    currentTruss={this.props.currentTruss}\n                />\n                <FixtureSelector \n                    selectedFixtures={this.props.selectedFixtures}\n                    onFixtureChange={this.handleFixtureChange}\n                    onRemoveButtonClick={this.handleRemoveButtonClick}\n                    currentTruss={this.props.currentTruss}\n                />\n                <div class=\"total-footer\">\n                    <Totals \n                        selectedFixtures={this.props.selectedFixtures}\n                        name=\"Total\"\n                    />\n                </div>\n\n            </div>\n        )\n    }\n}\n\nclass Review extends React.Component {\n    render() {\n        return(\n            <div>\n                <div class=\"review-details\">\n                    <TrussBreakdown \n                        selectedFixtures={this.props.selectedFixtures}\n                        trussList = {this.props.trussList}\n                    />  \n                    <BalancePhases\n                        selectedFixtures={this.props.selectedFixtures}\n                    />\n                </div>\n                <div class=\"total-footer\">\n                    <Totals \n                        selectedFixtures={this.props.selectedFixtures}\n                        name=\"Total\"\n                    /> \n                </div> \n            </div>\n        )\n    }\n}\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state={\n            //use trussList to allow user defined trusses at some point\n            trussList: [\"Project\",\"Truss 1\", \"Truss 2\", \"Truss 3\"],\n            currentTruss: \"Project\",\n            mode: \"build\",\n            selectedFixtures: [],\n        }\n        this.handleFixtureChange = this.handleFixtureChange.bind(this);\n        this.handleRemoveButtonClick = this.handleRemoveButtonClick.bind(this);\n        this.handleTrussSelect = this.handleTrussSelect.bind(this);\n        this.handleBuildMode = this.handleBuildMode.bind(this);\n    }\n    handleBuildMode(e) {\n        this.setState({\n            mode: e.target.dataset.mode,\n        });\n    }\n\n    handleTrussSelect (trussName) {\n        this.setState({\n            currentTruss: trussName,\n        });\n    }\n\n\n    handleFixtureChange (fixtureId, quantity) {\n        quantity = parseInt(quantity);\n        \n        let updatedSelectedFixtures = this.state.selectedFixtures.slice();\n\n        let newFixture = getObj(FIXTURES.fixtures,\"id\",fixtureId);\n\n        if (newFixture) {\n            let fixtureAlreadySelected = false;\n            updatedSelectedFixtures.forEach((fixture) => {\n                if (fixture.id === fixtureId && fixture.truss === this.state.currentTruss) {\n                    fixture.quantity = quantity;\n                    fixtureAlreadySelected = true;\n                    return;\n                }\n            })\n\n            if(!fixtureAlreadySelected) {\n                newFixture.quantity = quantity;\n                newFixture.selected = true;\n                newFixture.truss = this.state.currentTruss;\n                updatedSelectedFixtures.push(newFixture);\n            }\n        }\n\n        this.setState({\n            selectedFixtures: updatedSelectedFixtures,\n        });\n    }\n\n    handleRemoveButtonClick (fixtureId) {\n        let remainingFixtures = this.state.selectedFixtures.filter((fixture) => {\n            return (!(fixtureId === fixture.id && fixture.truss === this.state.currentTruss));\n        });\n        this.setState({\n            selectedFixtures: remainingFixtures,\n        });\n    }\n\n    render() {\n        let page = (\n            <Build\n                onTrussSelect={this.handleTrussSelect}\n                currentTruss={this.state.currentTruss}\n                selectedFixtures={this.state.selectedFixtures}\n                onRemoveButtonClick={this.handleRemoveButtonClick}\n                onFixtureChange={this.handleFixtureChange}\n                trussList = {this.state.trussList}\n        />\n        );\n        if (this.state.mode === \"review\") {\n            page = (\n            <Review \n                trussList = {this.state.trussList}\n                selectedFixtures={this.state.selectedFixtures}\n            />\n            );\n        }\n\n        let reviewStyle = (this.state.mode===\"review\") ? {fontWeight: 'bold'} : {fontWeight: 'lighter'};\n        let buildStyle = (this.state.mode===\"build\") ? {fontWeight: 'bold'} : {fontWeight: 'lighter'};\n\n        return (\n            <div>\n                <div id=\"header\">\n                    <h1>PatchPal</h1>\n                    <h2 \n                        style={buildStyle}\n                        onClick={this.handleBuildMode} \n                        data-mode=\"build\"\n                        >Build</h2>\n                    <h2\n                        style={reviewStyle}\n                        onClick={this.handleBuildMode} \n                        data-mode=\"review\"\n                    >Review</h2>\n                </div>\n            {page}\n            </div>\n        )\n    }\n}\n\n//function to prettify power results - number in, string out\nfunction printPower (power) {\n    let visualPower = Math.ceil(power).toString() + \"W\";\n\n    if (power>1000) {\n        visualPower = (power/1000).toFixed(2).toString() + \"kW\"\n    }\n    return visualPower;\n}\n\n\n\n//function to get total power draw from selected fixtures\nfunction powerDraw (selectedFixtures) {\n    let power = 0;\n    if (selectedFixtures) {\n        selectedFixtures.forEach((fixture) => {\n            if (fixture.quantity >= 1) {\n                power += Number(fixture.power)*Number(fixture.quantity);\n            }\n        });\n    }\n    return power;\n}\n\n\n//Function to return an object from list using key\nfunction getObj (list, keyName, id) {\n    let foundObj;\n    list.forEach((obj) => {\n        if (obj[keyName]===id) {\n            foundObj = { ...obj};\n            return;\n        }\n    });\n    return foundObj;\n}\n\n//Request json and only render page when json retreived\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n    if (this.readyState === 4 && this.status === 200) {\n        FIXTURES = JSON.parse(this.responseText);\n        \n        ReactDOM.render(\n            <App />,\n            document.querySelector('#root')\n        );\n    }\n};\nxmlhttp.open(\"GET\", \"fixtureData.json\", true);\nxmlhttp.send();"],"sourceRoot":""}